<% shortURL = request.protocol + request.env['HTTP_HOST'].sub(/^(m|www)\./, '') + webinar_path(@webinar) %>
<% isWebinarOwner = (user_signed_in? and current_user.id==@webinar.author_id) %>
<% user = user_signed_in? ? {'name' => current_user.name, 'path' => user_path(current_user), 'avatar' => current_user.loop_avatar_url}.to_json : 'guest' %>

<hr>
<section id="show_items " class="layout_show">
  <div class="doc-show">
    <h3><%= @webinar.title %></h3>
    <h5 class="publication-title"><%= link_to(@webinar.publication.title, @webinar.publication.loop_url, :target => '_blank')%></h5>
    <div class="box-show row">
      <div class="viewerContainer col-md-8">
        <div class="viewerElement"></div>
        <%= render :partial => 'webinar_show', :locals  => { :webinar => @webinar, :isWebinarOwner => isWebinarOwner } %>
      </div>
      <div class="viewerContainer col-md-4">
        <%= render :partial => 'webinar_related_tab', :locals  => { :webinar => @webinar, :isWebinarOwner => isWebinarOwner } %>
      </div>
    </div>

    <!--owner-profile-->
    <div class="description-activity">
      <div class="box_description">
        <!--tool-->
        <div class="webinar_tool">
          <%= render :partial => 'webinar_tool_tab', :locals => { :shortURL => shortURL} %>
        </div>
      </div>     

    </div>
  </div>
</section>

<%=javascript_include_tag "VISH.IframeAPI" %>
<script type="text/javascript" src="/assets/erizo.js"></script>
<script type="text/javascript">
  window.onload = function(){
    document.IDEM_SESSION = document.IDEM_SESSION || {};

    <% if isWebinarOwner %>
      $(window).resize(function(){
        document.IDEM_SESSION.localStream.player.resize();
      });
      document.IDEM_SESSION.localStream = Erizo.Stream({audio: true, video: true, data: true, attributes: {'user': "<%=user%>", 'current_presentation': 'none'}});
    <%else%>
      document.IDEM_SESSION.localStream = Erizo.Stream({audio: false, video: false, data: true, attributes: {'user': "<%=user%>"}});
    <%end%>

    document.IDEM_SESSION.room = Erizo.Room({token: "<%=@token%>"});

    document.IDEM_SESSION.localStream.addEventListener("access-accepted", function(){

        var subscribeToStreams = function (streams) {
            for (var index in streams) {
              var stream = streams[index];
              if (document.IDEM_SESSION.localStream.getID() !== stream.getID()) {
                  document.IDEM_SESSION.room.subscribe(stream);
              }
            }
        };

        document.IDEM_SESSION.room.addEventListener("room-connected", function (roomEvent) {
          subscribeToStreams(roomEvent.streams);
        });

        document.IDEM_SESSION.room.addEventListener("stream-subscribed", function(streamEvent){
            var stream = streamEvent.stream;
            <%if isWebinarOwner%>
              if (stream.getID() !== document.IDEM_SESSION.localStream.getID) {
                document.IDEM_SESSION.addParticipant(stream.getID(), stream.getAttributes().user);
              }
            <%else%>
              stream.play("webinar_video");
              $("#webinar_pre").hide();
              document.IDEM_SESSION.switchPresentation(stream.getAttributes().current_presentation, stream);
              stream.addEventListener("stream-data", function(evt) {
                if (evt.msg.type === "presentation") {
                  document.IDEM_SESSION.switchPresentation(evt.msg.pres_id, stream);
                } else if (evt.msg.type === "VE") {
                  _onLicodeMessage(evt.msg);
                }
              });
              $( window ).resize(function (){
                stream.player.resize();
              });
            <%end%>
        });

        document.IDEM_SESSION.room.addEventListener("stream-added", function (streamEvent) {
            var streams = [];
            streams.push(streamEvent.stream);
            subscribeToStreams(streams);
        });

        document.IDEM_SESSION.room.addEventListener("stream-removed", function (streamEvent) {
            // Remove stream from DOM
            var stream = streamEvent.stream;
            <%if isWebinarOwner%>
              document.IDEM_SESSION.removeParticipant(stream.getID());
            <%else%>
              $("#webinar_pre").show();
            <%end%>
        });

        document.IDEM_SESSION.room.connect();

        <%if isWebinarOwner%>
          document.IDEM_SESSION.localStream.play("webinar_video");
        <%end%>

    });

    document.IDEM_SESSION.localStream.init();
  };

  function onConnect(origin){
    // console.log("VE API: Communication stablished with " + origin);
    VISH.IframeAPI.registerCallback("onMessage",_onVEMessage);
  };

  var _onVEMessage = function(VEMessage,origin){
    var VEMessageObject = JSON.parse(VEMessage);
    if(typeof VEMessageObject.sent !== "boolean"){
      VEMessageObject.sent = true;
      // Send message using Licode stream
      document.IDEM_SESSION.localStream.sendData(VEMessageObject);
    }
  };

  var _onLicodeMessage = function(message){
    // console.log("_onLicodeMessage from:" + message.origin);
    // console.log(message);
    try {
      var VEMessageObject = message;
      if(typeof VEMessageObject.sent === "boolean"){
        // Received message from Web App
        // console.log("Received message from Web App: iframeAPI send message");
        VISH.IframeAPI.sendMessage(JSON.stringify(VEMessageObject));
      }
    } catch(e){}
  };
</script>