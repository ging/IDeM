<% shortURL = request.protocol + request.env['HTTP_HOST'].sub(/^(m|www)\./, '') + webinar_path(@webinar) %>
<% isWebinarOwner = (user_signed_in? and current_user.id==@webinar.author_id) %>
<% user = user_signed_in? ? {'name' => current_user.name, 'path' => user_path(current_user), 'avatar' => current_user.loop_avatar_url}.to_json : 'guest' %>

<!--<hr>-->
<section id="show_items " class="layout_show">
  <div class="doc-show">
    <h3><%= @webinar.title %></h3>
    <h5 class="publication-title"><%= link_to(@webinar.publication.title, @webinar.publication.loop_url, :target => '_blank')%></h5>
    <div class="box-show row">
      <div class="viewerContainer col-xs-12 col-sm-7 col-lg-9">
        <div class="viewerElement"></div>

        <%= render :partial => 'webinar_show', :locals  => { :webinar => @webinar, :isWebinarOwner => isWebinarOwner } %>
      </div>
      <div class="viewerContainer col-xs-12 col-sm-5 col-lg-3">
        <%= render :partial => 'webinar_related_tab', :locals  => { :webinar => @webinar, :isWebinarOwner => isWebinarOwner, :user => user } %>
      </div>
    </div>

    <!--owner-profile-->
    <div class="description-activity">
      <div class="box_description">
        <!--tool-->
        <div class="webinar_tool">
          <%= render :partial => 'webinar_tool_tab', :locals => { :shortURL => shortURL} %>
        </div>
      </div>

    </div>
  </div>
</section>

<%if isWebinarOwner %>
  <%= render 'recordings/recording_modal', :action => 'Record'%>
<%end%>

<%=javascript_include_tag "VISH.IframeAPI" %>
<script type="text/javascript" src="/assets/erizo.js"></script>
<script type="text/javascript">
  window.onload = function(){

    document.IDEM_SESSION = document.IDEM_SESSION || {};

    <% if isWebinarOwner %>
      $(window).resize(function(){
        document.IDEM_SESSION.videoStream.player.resize();
      });
      document.IDEM_SESSION.chatStream = Erizo.Stream({audio: false, video: false, data: true, attributes: {'user': "<%=user%>"}});
      document.IDEM_SESSION.videoStream = Erizo.Stream({audio: true, video: true, data: true, attributes: {'current_presentation': 'none'}});
    <%else%>
      document.IDEM_SESSION.chatStream = Erizo.Stream({audio: false, video: false, data: true, attributes: {'user': "<%=user%>"}});
    <%end%>

    document.IDEM_SESSION.room = Erizo.Room({token: "<%=@token%>"});

    document.IDEM_SESSION.chatStream.addEventListener("access-accepted", function(){

      var subscribeToStreams = function (streams) {
        for (var index in streams) {
          var stream = streams[index];
          if (!stream.hasVideo() && document.IDEM_SESSION.chatStream.getID() !== stream.getID()) {
              document.IDEM_SESSION.room.subscribe(stream);
          }
          <% if !isWebinarOwner %>
          if (stream.hasVideo()) {
              document.IDEM_SESSION.room.subscribe(stream);
          }
          <%end%>
        }
      };

      document.IDEM_SESSION.room.addEventListener("room-connected", function (roomEvent){
        subscribeToStreams(roomEvent.streams);
        document.IDEM_SESSION.room.publish(document.IDEM_SESSION.chatStream);
      });

      document.IDEM_SESSION.room.addEventListener("stream-subscribed", function(streamEvent){
          var stream = streamEvent.stream;
          if (stream.hasVideo()) {
            stream.play("webinar_video");
            $("#webinar_pre").hide();
             $( window ).resize(function (){
              stream.player.resize();
            });
            var streamAttributes = stream.getAttributes();
            document.IDEM_SESSION.switchPresentation(streamAttributes.current_presentation, stream);
            if(streamAttributes.current_presentation != "none"){
              document.IDEM_SESSION.currentSlide = (typeof streamAttributes.current_slide == "number") ? streamAttributes.current_slide : 1;
            }
            stream.addEventListener("stream-data", function(evt) {
              if (evt.msg.type === "presentation") {
                document.IDEM_SESSION.switchPresentation(evt.msg.pres_id, stream);
              } else if (evt.msg.type === "VE") {
                _onLicodeMessage(evt.msg);
              }
            });
          } else {
            <% if isWebinarOwner %>
            if (stream.getID() !== document.IDEM_SESSION.chatStream.getID) {
              document.IDEM_SESSION.addParticipant(stream.getID(), stream.getAttributes().user);
            }
            <% end %>
            stream.addEventListener("stream-data", function(evt) {
              if (evt.msg.type === "chat" && stream.getID() !== document.IDEM_SESSION.chatStream.getID()) {
                document.IDEM_SESSION.chat_message_received(evt.msg, undefined, evt.stream.getID());
              }
            });
          }
      });

      document.IDEM_SESSION.room.addEventListener("stream-added", function (streamEvent) {
          var streams = [];
          if (!streamEvent.stream.hasScreen()) {
            streams.push(streamEvent.stream);
            subscribeToStreams(streams);
          }
      });

      document.IDEM_SESSION.room.addEventListener("stream-removed", function (streamEvent) {
          // Remove stream from DOM
          var stream = streamEvent.stream;
          <% if isWebinarOwner %>
            document.IDEM_SESSION.removeParticipant(stream.getID());
          <% else %>
            $("#webinar_pre").show();
          <% end %>
      });

      document.IDEM_SESSION.room.connect();


    });
    document.IDEM_SESSION.chatStream.init();
    <% if isWebinarOwner %>
      document.IDEM_SESSION.videoStream.addEventListener("access-accepted", function(){
        document.IDEM_SESSION.videoStream.play("webinar_video");
      });
     document.IDEM_SESSION.videoStream.init();
    <% end %>
  };

  <% if isWebinarOwner %>
  function startRecording (callback){
    document.IDEM_SESSION.recordStream = Erizo.Stream({audio: true, screen: true});

    document.IDEM_SESSION.recordStream.addEventListener("access-accepted", function (){
      document.IDEM_SESSION.room.publish(document.IDEM_SESSION.recordStream, {}, function (stream_id) {
        document.IDEM_SESSION.room.startRecording(document.IDEM_SESSION.recordStream, function (recording_id) {
          document.IDEM_SESSION.recording_id = recording_id;
          $("#recording_button i").removeClass('fa-circle');
          $("#recording_button i").removeClass('special_record');
          $("#recording_button i").addClass('fa-stop');
          $("#recording_button").attr('data-original-title', 'Stop recording');
          $("#recording_button").unbind("click");
          $("#recording_button").on("click", stopRecording);
          $('#new_recording_modal').modal('hide');
          createRecording(recording_id);
        });
      });
    });

    document.IDEM_SESSION.recordStream.addEventListener("access-denied", function (){
      var alert = jQuery(
        '<div class="alert alert-danger alert-dismissable" role="alert">' +
          '<button type="button" class="close" data-dismiss="alert" aria-hidden="true">×</button>' +
          '<strong>Ups!</strong> You have to install ' +
          '<a href="https://addons.mozilla.org/es/firefox/addon/idem/" target="_blank" class="alert-link">Idem Webinar Recording extension</a> ' +
          'to record a webinar. Remember that it is only available in Firefox.' +
        '</div>'
      );
      $('#idem_notifications').append(alert);
      $('#new_recording_modal').modal('hide');
    });
    document.IDEM_SESSION.recordStream.init();
  }
  function stopRecording (){
    document.IDEM_SESSION.room.stopRecording(document.IDEM_SESSION.recording_id, function(result, error){
      if (result !== undefined){
        $("#recording_button i").addClass('fa-circle');
        $("#recording_button i").addClass('special_record');
        $("#recording_button i").removeClass('fa-stop');
        $("#recording_button").attr('data-original-title', 'Start recording');
        $("#recording_button").unbind("click");
        requestRecordingProcessing(document.IDEM_SESSION.recording.id);
        $("#recording_button").on("click", function (){
          $('#new_recording_modal').modal();
          startRecording();
        });
        var alert = jQuery(
          '<div class="alert alert-info alert-dismissable" role="alert">' +
            '<button type="button" class="close" data-dismiss="alert" aria-hidden="true">×</button>' +
            '<strong>Great!</strong> The webinar has been recorded. The recording is available  ' +
            '<a href="/recordings/' + document.IDEM_SESSION.recording.id + '" class="alert-link">here</a>.' +
          '</div>'
        );
        $('#idem_notifications').append(alert);
        }
    });
  }

  function createRecording(recording_id) {
    var url = '/recordings/';
    var data = {
      publication_id: "<%=@webinar.publication.id%>",
      webinar_id: "<%=@webinar.id%>",
      recording_id: recording_id + '',
      title: $('#recording_title').text()
    };

    $.ajax({
      url: url,
      type: 'POST',
      processData: false,
      contentType: 'application/json',
      data: JSON.stringify(data),
      statusCode: {
        200: function (data, status, xhr) {
          document.IDEM_SESSION.recording = JSON.parse(data).recording;
        }
      }
    });
  }
  function requestRecordingProcessing(id) {
    var url = '/recordings/' + id + '/process';

    $.ajax({
      url: url,
      type: 'POST',
      processData: false,
      statusCode: {
        200: function (data, status, xhr) {

        }
      }
    });
  }
  <% end %>

  function onConnect(origin){
    <% if isWebinarOwner %>
      VISH.IframeAPI.registerCallback("onGoToSlide",function(slideNumber,origin){
        var attributes = document.IDEM_SESSION.videoStream.getAttributes();
        attributes.current_slide = slideNumber;
        document.IDEM_SESSION.videoStream.setAttributes(attributes);
      });
    <% else %>
      VISH.IframeAPI.setSlave(true);
      if(typeof document.IDEM_SESSION.currentSlide == "number"){
        VISH.IframeAPI.goToSlide(document.IDEM_SESSION.currentSlide);
      }
    <% end %>
    // console.log("VE API: Communication stablished with " + origin);
    VISH.IframeAPI.registerCallback("onMessage",_onVEMessage);
  };

  var _onVEMessage = function(VEMessage,origin){
    var VEMessageObject = JSON.parse(VEMessage);
    if(typeof VEMessageObject.sent !== "boolean"){
      VEMessageObject.sent = true;
      // Send message using Licode stream
      document.IDEM_SESSION.videoStream.sendData(VEMessageObject);
    }
  };

  var _onLicodeMessage = function(message){
    // console.log("_onLicodeMessage from:" + message.origin);
    // console.log(message);
    try {
      var VEMessageObject = message;
      if(typeof VEMessageObject.sent === "boolean"){
        // Received message from Web App
        // console.log("Received message from Web App: iframeAPI send message");
        VISH.IframeAPI.sendMessage(JSON.stringify(VEMessageObject));
      }
    } catch(e){}
  };
</script>
